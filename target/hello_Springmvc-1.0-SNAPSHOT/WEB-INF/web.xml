<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明，注册springmvc的核心对象DispatcherServlet
            需要再tomcat服务器启动后，创建该实例。
            因为DispatcherServlet在创建过程中会创建springmvc容器对象，
            读取springmvc的配置文件，把这个配置文件中的对象都创建好，当 用户发起请求时就可以直接使用对象了。

            serclet初始化会执行init方法。DispatcherServlet在init（）中{
                创建容器，读取配置文件；
                把容器对象放到servletcontext中
            }
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!---->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--在tomcat启动后，创建servlet对象
            load-on-startup:表示tomcat启动后创建对象的顺序。
            它的值是整数，数值越小，创建对象的时间越早。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <!--
            使用框架的时候，url-pattern可以使用两种值
            1. 使用扩展名方式，语法例如 *.do, *.action等等
            2. 使用斜杠 “/”
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!--注册声明过滤器，解决post请求乱码的问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
